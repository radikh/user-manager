// Code generated by MockGen. DO NOT EDIT.
// Source: cmd/umcli/actionintf.go

// Package main is a generated GoMock package.
package main

import (
	context "context"
	sql "database/sql"
	gomock "github.com/golang/mock/gomock"
	config "github.com/lvl484/user-manager/config"
	model "github.com/lvl484/user-manager/model"
	storage "github.com/lvl484/user-manager/storage"
	cli "github.com/urfave/cli/v2"
	io "io"
	reflect "reflect"
)

// MockActionChecker is a mock of ActionChecker interface
type MockActionChecker struct {
	ctrl     *gomock.Controller
	recorder *MockActionCheckerMockRecorder
}

// MockActionCheckerMockRecorder is the mock recorder for MockActionChecker
type MockActionCheckerMockRecorder struct {
	mock *MockActionChecker
}

// NewMockActionChecker creates a new mock instance
func NewMockActionChecker(ctrl *gomock.Controller) *MockActionChecker {
	mock := &MockActionChecker{ctrl: ctrl}
	mock.recorder = &MockActionCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockActionChecker) EXPECT() *MockActionCheckerMockRecorder {
	return m.recorder
}

// Config mocks base method
func (m *MockActionChecker) Config() (*config.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(*config.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Config indicates an expected call of Config
func (mr *MockActionCheckerMockRecorder) Config() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockActionChecker)(nil).Config))
}

// DBConfig mocks base method
func (m *MockActionChecker) DBConfig(arg0 context.Context) (*storage.DBConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DBConfig", arg0)
	ret0, _ := ret[0].(*storage.DBConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DBConfig indicates an expected call of DBConfig
func (mr *MockActionCheckerMockRecorder) DBConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DBConfig", reflect.TypeOf((*MockActionChecker)(nil).DBConfig), arg0)
}

// ConnectToDB mocks base method
func (m *MockActionChecker) ConnectToDB(arg0 *storage.DBConfig) (*sql.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectToDB", arg0)
	ret0, _ := ret[0].(*sql.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConnectToDB indicates an expected call of ConnectToDB
func (mr *MockActionCheckerMockRecorder) ConnectToDB(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectToDB", reflect.TypeOf((*MockActionChecker)(nil).ConnectToDB), arg0)
}

// UsersRepo mocks base method
func (m *MockActionChecker) UsersRepo() (*model.UsersRepo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UsersRepo")
	ret0, _ := ret[0].(*model.UsersRepo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsersRepo indicates an expected call of UsersRepo
func (mr *MockActionCheckerMockRecorder) UsersRepo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersRepo", reflect.TypeOf((*MockActionChecker)(nil).UsersRepo))
}

// MessageCommandDone mocks base method
func (m *MockActionChecker) MessageCommandDone(msg string, err error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageCommandDone", msg, err)
	ret0, _ := ret[0].(error)
	return ret0
}

// MessageCommandDone indicates an expected call of MessageCommandDone
func (mr *MockActionCheckerMockRecorder) MessageCommandDone(msg, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageCommandDone", reflect.TypeOf((*MockActionChecker)(nil).MessageCommandDone), msg, err)
}

// ExecuteAction mocks base method
func (m *MockActionChecker) ExecuteAction(c *cli.Context, action int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteAction", c, action)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteAction indicates an expected call of ExecuteAction
func (mr *MockActionCheckerMockRecorder) ExecuteAction(c, action interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteAction", reflect.TypeOf((*MockActionChecker)(nil).ExecuteAction), c, action)
}

// getCredentials mocks base method
func (m *MockActionChecker) getCredentials(rd io.Reader) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getCredentials", rd)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// getCredentials indicates an expected call of getCredentials
func (mr *MockActionCheckerMockRecorder) getCredentials(rd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getCredentials", reflect.TypeOf((*MockActionChecker)(nil).getCredentials), rd)
}

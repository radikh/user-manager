// Code generated by MockGen. DO NOT EDIT.
// Source: model/user.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/lvl484/user-manager/model"
)

// MockUsers is a mock of Users interface
type MockUsers struct {
	ctrl     *gomock.Controller
	recorder *MockUsersMockRecorder
}

// MockUsersMockRecorder is the mock recorder for MockUsers
type MockUsersMockRecorder struct {
	mock *MockUsers
}

// NewMockUsers creates a new mock instance
func NewMockUsers(ctrl *gomock.Controller) *MockUsers {
	mock := &MockUsers{ctrl: ctrl}
	mock.recorder = &MockUsersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUsers) EXPECT() *MockUsersMockRecorder {
	return m.recorder
}

// Add mocks base method
func (m *MockUsers) Add(args ...interface{}) error {
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Add", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add
func (mr *MockUsersMockRecorder) Add(args ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockUsers)(nil).Add), args...)
}

// Update mocks base method
func (m *MockUsers) Update(args ...interface{}) error {
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockUsersMockRecorder) Update(args ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUsers)(nil).Update), args...)
}

// Delete mocks base method
func (m *MockUsers) Delete(login string) error {
	ret := m.ctrl.Call(m, "Delete", login)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockUsersMockRecorder) Delete(login interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUsers)(nil).Delete), login)
}

// Disable mocks base method
func (m *MockUsers) Disable(login string) error {
	ret := m.ctrl.Call(m, "Disable", login)
	ret0, _ := ret[0].(error)
	return ret0
}

// Disable indicates an expected call of Disable
func (mr *MockUsersMockRecorder) Disable(login interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disable", reflect.TypeOf((*MockUsers)(nil).Disable), login)
}

// Activate mocks base method
func (m *MockUsers) Activate(login string) error {
	ret := m.ctrl.Call(m, "Activate", login)
	ret0, _ := ret[0].(error)
	return ret0
}

// Activate indicates an expected call of Activate
func (mr *MockUsersMockRecorder) Activate(login interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Activate", reflect.TypeOf((*MockUsers)(nil).Activate), login)
}

// GetInfo mocks base method
func (m *MockUsers) GetInfo(login string) (*model.User, error) {
	ret := m.ctrl.Call(m, "GetInfo", login)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInfo indicates an expected call of GetInfo
func (mr *MockUsersMockRecorder) GetInfo(login interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfo", reflect.TypeOf((*MockUsers)(nil).GetInfo), login)
}

// CheckLoginExist mocks base method
func (m *MockUsers) CheckLoginExist(lo string) (bool, error) {
	ret := m.ctrl.Call(m, "CheckLoginExist", lo)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckLoginExist indicates an expected call of CheckLoginExist
func (mr *MockUsersMockRecorder) CheckLoginExist(lo interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckLoginExist", reflect.TypeOf((*MockUsers)(nil).CheckLoginExist), lo)
}
